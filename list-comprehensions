````markdown
# Python Nested Loops & List Comprehensions — Complete Guide

Welcome! This README covers everything you need to know about **nested loops** and **list comprehensions** in Python. It’s designed as a friendly, easy-to-understand reference for beginners and anyone looking to deepen their understanding.

---

## 1. Nested Loops Explained

Nested loops mean putting a loop inside another loop.

### Example:

```python
for j in range(1, 4):
    for i in range(1, 4):
        print(i * j)
    print()  # Blank line after inner loop
````

Output:

```
1
2
3

2
4
6

3
6
9
```

* Outer loop variable `j` runs from 1 to 3.
* Inner loop variable `i` runs from 1 to 3 for each `j`.
* `i * j` is printed step by step.
* Blank `print()` separates groups for readability.

---

## 2. From Nested Loops to Lists

If you want to **collect results** instead of printing:

```python
result = []

for j in range(1, 4):
    inner_list = []
    for i in range(1, 4):
        inner_list.append(i * j)
    result.append(inner_list)

print(result)
```

Output:

```python
[[1, 2, 3], [2, 4, 6], [3, 6, 9]]
```

This creates a **nested list** (a list of lists), where each inner list contains the products for one `j`.

---

## 3. List Comprehensions — Quick Intro

List comprehensions provide a **compact way** to create lists.

### Basic Syntax:

```python
[expression for item in iterable]
```

### Example:

```python
squares = [x**2 for x in range(1, 6)]
print(squares)  # [1, 4, 9, 16, 25]
```

---

## 4. Adding Conditions (Filters)

You can filter items using `if`:

```python
[expression for item in iterable if condition]
```

### Example — Squares of even numbers:

```python
even_squares = [x**2 for x in range(1, 11) if x % 2 == 0]
print(even_squares)  # [4, 16, 36, 64, 100]
```

---

## 5. Nested List Comprehensions

You can nest multiple loops inside a comprehension:

```python
[[i * j for i in range(1, 4)] for j in range(1, 4)]
```

Equivalent to nested loops above, creating:

```python
[[1, 2, 3], [2, 4, 6], [3, 6, 9]]
```

---

## 6. Generic Structure of Nested List Comprehensions

```python
[[expression involving i and j for i in iterable1] for j in iterable2]
```

* Outer loop runs over `j` in `iterable2`.
* Inner loop runs over `i` in `iterable1`.
* The expression uses both `i` and `j`.

---

## 7. Loop Iterations Clarified

Example:

```python
pairs = []
for x in [10, 20, 30]:
    for y in [3, 4]:
        pairs.append((x, y))
print(pairs)
```

Output:

```python
[(10, 3), (10, 4), (20, 3), (20, 4), (30, 3), (30, 4)]
```

* Outer loop runs 3 times (once per element in `[10, 20, 30]`).
* Inner loop runs 2 times for each outer loop.
* Total iterations: 3 × 2 = 6.

---

## 8. Deep Dive: List Comprehension Syntax

### Basic syntax:

```python
[expression for item in iterable]
```

* `expression`: value or operation using `item`.
* `for item in iterable`: iterates over elements.

### With filter:

```python
[expression for item in iterable if condition]
```

### Nested loops:

```python
[expression for item1 in iterable1 for item2 in iterable2]
```

### Complex example with conditions:

```python
products = [i * j for i in range(1, 5) if i % 2 == 0
                    for j in range(1, 5) if j % 2 == 0]
print(products)  # [4, 8, 8, 16]
```

---

## 9. When to Use List Comprehensions

* When you want to **create or transform lists** quickly and clearly.
* When you want to **filter elements** easily.
* When you want **concise code** instead of multiple lines of loops.

---

## 10. When to Use Regular Loops Instead

* When you want to perform **side effects** (like printing) without building a list.
* When your logic is complex and not easily expressed in one line.
* When you’re working with other data structures (like dictionaries or sets).

---

## 11. Summary Table

| Syntax Part            | Purpose                           | Example                               |
| ---------------------- | --------------------------------- | ------------------------------------- |
| `expression`           | What to compute/store per item    | `x**2`, `(i, j)`, `i*j`               |
| `for item in iterable` | Loop over elements                | `for x in range(5)`                   |
| `if condition`         | Filter which items to include     | `if x % 2 == 0`                       |
| Multiple loops         | Nested loops for all combinations | `for i in range(2) for j in range(3)` |

---

## 12. Happy Coding!

This README is your companion to mastering loops and list comprehensions in Python — useful for coding challenges, interviews, and daily programming.

Feel free to copy, adapt, and share!

---

*Created by Bharath Devanaboina*
*Date: 2025-06-09*

```

---

If you want me to create the actual `README.md` file ready for upload, or add your name/contact, just say! Would you like that?
```
